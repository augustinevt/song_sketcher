{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["chordGenerator","Khord","patternMaker","playWorkbench","stopWorkbench","getRandomProgression","getAllChords","chordNotes","ProgressionChordOptions","MusicUI","ProgressionWorkbench","ProgressionPatternOptions","GenerateButton","Workbench","styled","div","Options","Wrapper","AppWrapper","App","useState","chords","setChords","key","setKey","mode","setMode","tempo","setTempo","chordPattern","setChordPattern","activeIndex","setActiveIndex","keyVal","modeVal","tempoVal","onKeyChange","value","onModeChange","onTempoChange","parseInt","onChange","pattern","onSubmit","theme","getKeyChords","changeChord","name","index","notes","newChords","newNotes","chordNames","addChord","splice","removeChord","play","sections","stateUpdater","i","params","stop","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"y/CAQQA,EAAiCC,IAAjCD,eAAgBE,EAAiBD,IAAjBC,aAGtBC,EAEED,EAFFC,cACAC,EACEF,EADFE,cAIAC,EAGEL,EAHFK,qBACAC,EAEEN,EAFFM,aACAC,EACEP,EADFO,WAIAC,EAIEC,IAJFD,wBACAE,EAGED,IAHFC,qBACAC,EAEEF,IAFFE,0BACAC,EACEH,IADFG,eAGIC,EAAYC,UAAOC,IAAV,KAITC,EAAUF,UAAOC,IAAV,KAQPE,EAAUH,UAAOC,IAAV,KAQPG,EAAaJ,UAAOC,IAAV,KA0FDI,MAnFf,WAAgB,IAAD,EAEeC,mBAAS,IAFxB,mBAENC,EAFM,KAEEC,EAFF,OAGSF,mBAAS,KAHlB,mBAGNG,EAHM,KAGDC,EAHC,OAIWJ,mBAAS,cAJpB,mBAINK,EAJM,KAIAC,EAJA,OAKaN,mBAAS,KALtB,mBAKNO,EALM,KAKCC,EALD,OAM2BR,mBAAS,IANpC,mBAMNS,EANM,KAMQC,EANR,OAOyBV,mBAAS,GAPlC,mBAONW,EAPM,KAOOC,EAPP,KAeb,OACE,kBAACd,EAAD,KACE,kBAACD,EAAD,KAGE,kBAACD,EAAD,KAEE,kBAACR,EAAD,CACEyB,OAAQV,EACRW,QAAST,EACTU,SAAUR,EACVS,YAAc,SAAAC,GAAK,OAAIb,EAAOa,IAC9BC,aAAe,SAAAD,GAAK,OAAIX,EAAQW,IAChCE,cAAgB,SAAAF,GAAK,OAAIT,EAASY,SAASH,OAG7C,kBAAC1B,EAAD,CACE8B,SAAU,SAACC,GAAaZ,EAAgBY,MAG1C,kBAAC9B,EAAD,CAAgB+B,SA1BD,WACrBrB,EAAUjB,EACR,CAAEkB,MAAKE,OAAME,QAAOiB,MAAO,YA2BzB,kBAAC/B,EAAD,KACE,kBAACH,EAAD,CACEmC,aAAc,kBAAMvC,EAAa,CAACmB,OAAMF,SACxCuB,YAAa,YAA2B,IAAzBC,EAAwB,EAAxBA,KAAaC,GAAW,EAAlBC,MAAkB,EAAXD,OACpBE,EAAS,KAAO7B,GAChB8B,EAAW5C,EAAWwC,GAC5BG,EAAUE,WAAWJ,GAASD,EAC9BG,EAAU3C,WAAWyC,GAASG,EAC9B7B,EAAU4B,IAEZG,SACE,YAA2B,IAAzBN,EAAwB,EAAxBA,KAAaC,GAAW,EAAlBC,MAAkB,EAAXD,OACPE,EAAS,KAAO7B,GAChB8B,EAAW5C,EAAWwC,GAC5BG,EAAUE,WAAWE,OAAON,EAAM,EAAE,EAAED,GACtCG,EAAU3C,WAAW+C,OAAON,EAAM,EAAE,EAAEG,GACtC7B,EAAU4B,IAGdK,YAAa,SAACP,GACZ,IAAME,EAAS,KAAO7B,GACtB6B,EAAUE,WAAWE,OAAON,EAAM,GAClCE,EAAU3C,WAAW+C,OAAON,EAAM,GAClC1B,EAAU4B,IAEZ7B,OAAQA,EAAO+B,WACfI,KAAM,kBAAMrD,EAAc,CACxBsD,SAAU,CAACpC,GACXqC,aAAc,SAACC,GAAO3B,EAAe2B,IACrCC,OAAQ,CAAElB,QAASb,EAAcF,YAEnCI,YAAaA,EACb8B,KAAMzD,QCjHE0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5cd3bdc8.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport styled from 'styled-components'\n// import logo from './logo.svg';\nimport './App.css';\n\nimport MusicUI from 'chord-sketch-ui'\nimport Khord from 'chord-generator'\n\nconst { chordGenerator, patternMaker } = Khord\n\nconst {\n  playWorkbench,\n  stopWorkbench,\n} = patternMaker\n\nconst {\n  getRandomProgression,\n  getAllChords,\n  chordNotes\n} = chordGenerator;\n\nconst {\n  ProgressionChordOptions,\n  ProgressionWorkbench,\n  ProgressionPatternOptions,\n  GenerateButton,\n} = MusicUI\n\nconst Workbench = styled.div`\n  /* border: solid; */\n  width: 100%;\n`\nconst Options = styled.div`\n  /* border: 1px solid red; */\n  display: flex;\n  width: 100%;\n  flex-wrap: wrap;\n  margin-bottom: 30px;\n`\n\nconst Wrapper = styled.div`\n  width: 40%;\n  /* border: solid; */\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`\n\nconst AppWrapper = styled.div`\n  /* border: solid; */\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n`\n\nfunction App() {\n\n  const [chords, setChords] = useState([])\n  const [key, setKey] = useState('D')\n  const [mode, setMode] = useState('mixolydian')\n  const [tempo, setTempo] = useState(120)\n  const [chordPattern, setChordPattern] = useState([])\n  const [activeIndex, setActiveIndex] = useState(0)\n\n  const generateChords = () => {\n    setChords(getRandomProgression(\n      { key, mode, tempo, theme: null }\n    ))\n  }\n\n  return (\n    <AppWrapper>\n      <Wrapper>\n\n\n        <Options>\n\n          <ProgressionChordOptions\n            keyVal={key}\n            modeVal={mode}\n            tempoVal={tempo}\n            onKeyChange={ value => setKey(value) }\n            onModeChange={ value => setMode(value)}\n            onTempoChange={ value => setTempo(parseInt(value))}\n          />\n\n          <ProgressionPatternOptions\n            onChange={(pattern) => {setChordPattern(pattern)}}\n          />\n\n          <GenerateButton onSubmit={generateChords}/>\n        </Options>\n\n        <Workbench>\n          <ProgressionWorkbench\n            getKeyChords={() => getAllChords({mode, key})}\n            changeChord={({name, notes, index}) => {\n              const newChords = {...chords}\n              const newNotes = chordNotes(name)\n              newChords.chordNames[index] = name\n              newChords.chordNotes[index] = newNotes\n              setChords(newChords)\n            }}\n            addChord={\n              ({name, notes, index}) => {\n                const newChords = {...chords}\n                const newNotes = chordNotes(name)\n                newChords.chordNames.splice(index+1,0,name)\n                newChords.chordNotes.splice(index+1,0,newNotes)\n                setChords(newChords)\n              }\n            }\n            removeChord={(index) => {\n              const newChords = {...chords}\n              newChords.chordNames.splice(index,1)\n              newChords.chordNotes.splice(index,1)\n              setChords(newChords)\n            }}\n            chords={chords.chordNames}\n            play={() => playWorkbench({\n              sections: [chords],\n              stateUpdater: (i) => {setActiveIndex(i)},\n              params: { pattern: chordPattern, tempo }\n            })}\n            activeIndex={activeIndex}\n            stop={stopWorkbench}\n          />\n        </Workbench>\n\n\n      </Wrapper>\n\n\n\n    </AppWrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}